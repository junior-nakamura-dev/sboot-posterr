{
	"info": {
		"_postman_id": "913b847d-3f6c-40cb-b7e3-c59e35328453",
		"name": "Posterr",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User profile page",
			"item": [
				{
					"name": "User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOMAIN}}/v1/user/2",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"user",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "FollowingUsers by UserId",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"descricao\": \"nome\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DOMAIN}}/v1/user/following/1",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"user",
								"following",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "FollowedUsers by UserId",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOMAIN}}/v1/user/followed/1",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"user",
								"followed",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post\": \"audioslave\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DOMAIN}}/v1/post",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userFollowingId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DOMAIN}}/v1/user/follow",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"user",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{DOMAIN}}/v1/user/unfollow/4",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"user",
								"unfollow",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve posts with parameters (UserProfile)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOMAIN}}/v1/post?page=0&chunk=5&userProfileId=2",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"description": "Default value is 0. Parameter for pagination"
								},
								{
									"key": "chunk",
									"value": "5",
									"description": "Default value is 5. Parameter for pagination"
								},
								{
									"key": "lastPostIdSeen",
									"value": "0",
									"description": "Default value is null. If has value you can see all posts with id < 0. It´s useful for infinite scroll in app, frontend send the lastId of the page and the backend can handle what the frontend has to see. If you just send the pagination in some scenarios he can stuck in the same post for example if 5 new post are created in posterr when the user is reading. ",
									"disabled": true
								},
								{
									"key": "userProfileId",
									"value": "2",
									"description": "Default value is 0. If value is <> 0 API retrieve the post from userProfileId. When = 0 see from anyone. If value is <> 0 the value from seeingAll is always true."
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Homepage",
			"item": [
				{
					"name": "Create post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post\": \"audioslave\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{DOMAIN}}/v1/post",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve posts with parameters (Homepage)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{DOMAIN}}/v1/post?page=0&chunk=10&seeingAll=true",
							"host": [
								"{{DOMAIN}}"
							],
							"path": [
								"v1",
								"post"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"description": "Default value is 0. Parameter for pagination"
								},
								{
									"key": "chunk",
									"value": "10",
									"description": "Default value is 5. Parameter for pagination"
								},
								{
									"key": "seeingAll",
									"value": "true",
									"description": "Default value is true. If true show post for everyone when false just show post of followed users."
								},
								{
									"key": "lastPostIdSeen",
									"value": "5",
									"description": "Default value is null. If has value you can see all posts with id < 0. It´s useful for infinite scroll in app, frontend send the lastId of the page and the backend can handle what the frontend has to see. If you just send the pagination in some scenarios he can stuck in the same post for example if 5 new post are created in posterr when the user is reading. ",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "DOMAIN",
			"value": "http://localhost:8080",
			"type": "default"
		}
	]
}